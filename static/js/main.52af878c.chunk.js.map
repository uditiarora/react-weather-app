{"version":3,"sources":["components/Title.js","components/Searchbox.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Searchbox","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","apiCall","json","data","console","log","setState","main","temp","sys","weather","message","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52af878c.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/title.css';\r\nfunction Title() {\r\n    return(\r\n        <div className=\"title-img\">\r\n            <br></br>\r\n            <h1 className=\"title\">Weather Finder</h1>\r\n        </div>\r\n    );\r\n};\r\nexport default Title;\r\n","import React from 'react';\r\nimport '../css/searchbox.css';\r\nfunction Searchbox(props) {\r\n    return(\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    );\r\n};\r\nexport default Searchbox;","import React from 'react';\r\nimport '../css/weather.css';\r\nfunction Weather(props) {\r\n    return(\r\n        <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\">Location:\r\n                <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.temperature && <p className=\"weather__key\">Temperature:\r\n                <span className=\"weather__value\"> {props.temperature}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.humidity && <p className=\"weather__key\">Humidity:\r\n                <span className=\"weather__value\"> {props.humidity}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.description && <p className=\"weather__key\">Condition:\r\n                <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.error && <p className=\"weather__error\">Condition: {props.error}</p>\r\n        }\r\n    </div>\r\n    );\r\n};\r\nexport default Weather;","import React from 'react';\nimport Title from './components/Title';\nimport Searchbox from './components/Searchbox';\nimport Weather from './components/Weather';\nimport './App.css';\nconst API_KEY = '9b9812f090bb18b0071dcaf5d14ef40d';\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async ( e ) => {\n    e.preventDefault();\n\n    const city    = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const apiCall = await fetch( `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${ API_KEY }` );\n    const data = await apiCall.json();\n    console.log( data );\n\n    if ( city && country ) {\n      this.setState( {\n        temperature: ( data.main && data.main.temp ) ? data.main.temp : '',\n        city: ( data.name ) ? data.name : '',\n        country: ( data.sys && data.sys.country ) ? data.sys.country : '',\n        humidity: ( data.main && data.main.humidity ) ? data.main.humidity : '',\n        description: ( data.weather && data.weather[0].description ) ? data.weather[0].description : '',\n        error: (data.message) ? data.message : ''\n      } );\n    } else {\n      this.setState( {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the value'\n      } );\n    }\n  };\n\n  render() {\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-md-5 col-sm-12 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-md-7 col-sm-12 form-container\">\n                  <Searchbox getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}